helperFunctions
selectApplet

/register JCipher 0102030405 com.ibm.jc.tools.CryptoPlugin
/applet JCipher

/echo ############   LOAD PROFILES   ############

## Check that entries have been personalized
if !${personalizationSuccessful} && ${personalizationSuccessful} != 1
    testPersonalizeCredential
end 

## Load the credential 
/send 80300000#(837818${docType}F5${credHBK})00 9000

## Get a signing key blob
/set-var signingKeyBlob $(sendDataInChain 40 00 01 00 9000)
signingKeyBlob=${signingKeyBlob;s6,120} 

## Create ephemeral key
/send 8052000100 835841*5820*9000
/set-var ephPubKey ${response;s2,134}

## Authenticate user 
/send 80310002#(830C1A13A112734401560900)00 9000

## Load access control profiles
/set-var secureACP1 82${accessProfile1}${encProfile1}
/send 80320000#(${secureACP1}) *6982 # Reader authentication not provided

## Authenticate reader 
# Add the ephemeral key to the session transcript
/set-var sessTrans A27153657373696F6E5472616E736372697074A172457068656D6572616C5075626C69634B6579${ephPubKey}675265717565737482A367446F635479706578186F72672E69736F2E31383031332D352E323031392E6D646C6C506572736F6E616C4461746184694C617374206E616D656A426972746820646174656A4669727374206E616D656C486F6D65206164647265737365496D616765816E506F72747261697420696D616765A367446F63547970657834636F6D2E616E64726F69642E6964656E746974795F63726564656E7469616C2E6578616D706C652E6C6962726172795F636172646C506572736F6E616C4461746182694C617374206E616D656A4669727374206E616D6565496D616765816E506F72747261697420696D616765

# Sign it
sign --mode ECDSA -o genSign -d ${readerPrivKey} -h SHA-256 -i ${sessTrans}
/set-var signature 30440220${SIGNATURE_ECDSA_R}0220${SIGNATURE_ECDSA_S}

# Send the reader authentication data
/set-var readerAuth 8359015F${sessTrans}5841${readerPubKey}5846${signature}
sendDataInChain 31 00 01 ${readerAuth} 9000

/send 80320000#(${secureACP1}) *9000

/set-var secureACP2 82${accessProfile2}${encProfile1}
/send 80320000#(${secureACP2}) *6982  # Invalid MAC
/set-var secureACP2 82${accessProfile2}${encProfile2}
/send 80320000#(${secureACP2}) *9000

/set-var secureACP3 82${accessProfile3}${encProfile3}
/send 80320000#(${secureACP3}) *9000

/set-var secureACP4 82${accessProfile4}${encProfile4}
/send 80320000#(${secureACP4}) *9000

/send 803A0002#(${namespace1GetSuccess})00 *9000
/send 803B0000#(${entry1AddData})00 *9000
/send 803B0100#(${encEntry1})00 *9000
/send 803B0000#(${entry2AddData})00 *9000
/send 803B0100#(${encEntry3})00 *6982  # Decryption should fail
/send 803B0100#(${encEntry2})00 *9000
/send 803B0000#(${entry3AddData})00 *6982
/send 803B0100#(${encEntry3})00 *6985
/send 803B0000#(${entry4AddData})00 *9000
/send 803B0100#(${encEntry4})00 *9000

/send 803A0002#(${namespace2})00 *9000
/send 803B0000#(${entry5AddData})00 *9000
sendDataInChain 3B 01 00 ${encryptedChunk1} 9000
#sendDataInChain 3B 06 00 ${encryptedChunk2} 9000
#sendDataInChain 3B 06 00 ${encryptedChunk3} 9000
#sendDataInChain 3B 06 00 ${encryptedChunk4} 9000
#sendDataInChain 3B 07 00 ${encryptedChunk5} 9000

sendDataInChain 3C 00 00 825820000000000000000000000000000000000000000000000000000000000000000058#(${signingKeyBlob}) 9000

/applet cm
